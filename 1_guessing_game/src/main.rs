use rand::Rng;
use std::cmp::Ordering;
use std::io;

fn main() {
    println!("Guess the number!");

    let secret_number = rand::thread_rng().gen_range(1..=1000);

    // println!("The secret number is: {secret_number}");

    loop {
        // Infinite loop

        println!("Please input your guess.");

        let mut guess = String::new(); // Inferred type

        let bytes = io::stdin()
            .read_line(&mut guess) // Readline returns a Result type enum which has Ok and Err
            .expect("Failed to read line"); // expect() exits if the Result type is Err

        // Shadowing the guess variable to convert its type, we trim to remove the newline character generated by pressing "Enter" to satisfy read_line(), parse() converts the type
        let guess: u32 = match guess.trim().parse() {
            // parse() also returns a Result, we can match each enum to handle the error instead of crashing with expect()
            Ok(num) => num,
            Err(_) => continue,
        };

        println!("You guessed: {guess}, that's {} bytes", bytes);

        match guess.cmp(&secret_number) {
            // .cmp returns an Ordering, match lets us act on the (matching) return value.
            Ordering::Less => println!("Too small!"),
            Ordering::Greater => println!("Too big!"),
            Ordering::Equal => {
                println!("You win!");
                break;
            }
        }
    }
}
